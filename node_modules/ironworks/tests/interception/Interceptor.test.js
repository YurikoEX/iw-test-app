
var _ = require('lodash');
var ioClient = require('socket.io-client');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var Interceptor = require('../../src/interception/Interceptor');
var Service = require('../../src/service/Service');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');
var SocketWorker = require('../../src/workers/SocketWorker');

describe('Interceptor', function () {
    beforeEach(function (done) {
        if (_.isUndefined(process.env.VCAP_APP_PORT)) {
            process.env.VCAP_APP_PORT = 8081;
        }
        done();
    });

    it("", function (done) {
        var intercepted = 0;
        var service = new Service('service-name', {
            dependencyCheckTimeout: 250000,
            dependencyCheckFrequency: 10
        })
            .inject(function (service, use) {
                var w = new Worker([
                    'iw-socket'
                ], service.comm, service.who(), {
                    id: 'worker-test-id',
                    name: 'worker-test'
                });
                w.listen('test', function () {
                    service.dispose(function () {
                        expect(intercepted).to.be.equal(1);
                        done();
                    });
                });
                w.init = function (cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                w.start = function (deps, cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                use(w);
            })
            .inject(function (service, use) {
                use(new SocketWorker(service.comm, service.who()));
            })
            .inject(function (service, use) {
                use(new HttpWorker(service.comm, service.who()));
            })
            .info('error', function (e) {
                throw e;
            })
            .info('ready', function (iw) {
                iw.service.comm.intercept('comm.service-name.tell.worker-test.test').listen(function (emit, next, done) {
                    intercepted++;
                    next();
                });
                iw.service.get({
                    names: [ 'iw-http' ]
                }, function (e, results) {
                    ioClient(results.list()[0].httpServer.info.uri).emit('tell.worker-test.test');
                });
            })
            .start();
    });

});
