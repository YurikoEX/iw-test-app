var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var idHelper = require('../helpers/idHelper');
var CommEvent = require('../eventing/CommEvent');
var Eventer = require('./Eventer');
var Comm = (function (_super) {
    __extends(Comm, _super);
    function Comm(whoAmI, opts) {
        _super.call(this);
        var defOpts = {
            prefix: 'comm'
        };
        this.opts = this.opts.beAdoptedBy(defOpts, 'eventer');
        this.opts.merge(opts);
        this.me = whoAmI;
        this.running = false;
    }
    Comm.prototype.init = function (callback) {
        process.nextTick(function () {
            callback(null);
        });
    };
    Comm.prototype.start = function (callback) {
        this.running = true;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null);
            });
        }
    };
    Comm.prototype.prefix = function () {
        return this.opts.get('prefix');
    };
    Comm.prototype.who = function (callback) {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null, iam);
            });
        }
        return iam;
    };
    Comm.prototype.getDependencyNames = function () {
        return [];
    };
    Comm.prototype.getComm = function () {
        return this;
    };
    Comm.getCommEvent = function (event) {
        if (typeof event === 'string') {
            return new CommEvent({
                prefix: void 0,
                service: void 0,
                method: void 0,
                worker: void 0,
                name: event
            });
        }
        return event;
    };
    Comm.prototype.getEmit = function (event) {
        if (typeof event === 'string') {
            var evt = Comm.getCommEvent(event);
            if (_.isUndefined(evt.id)) {
                evt.id = idHelper.newId();
            }
            if (_.isUndefined(evt.emitter)) {
                evt.emitter = this.me;
            }
        }
        return event;
    };
    Comm.prototype.tell = function (event) {
        var emit = this.getEmit(event);
        return _super.prototype.tell.call(this, emit);
    };
    Comm.prototype.inform = function (event, info) {
        var emit = this.getEmit(event);
        return _super.prototype.inform.call(this, emit, info);
    };
    Comm.prototype.confirm = function (event, callback) {
        var emit = this.getEmit(event);
        return _super.prototype.confirm.call(this, emit, callback);
    };
    Comm.prototype.ask = function (event, callback) {
        var emit = this.getEmit(event);
        return _super.prototype.ask.call(this, emit, callback);
    };
    Comm.prototype.request = function (event, request, callback) {
        var emit = this.getEmit(event);
        return _super.prototype.request.call(this, emit, request, callback);
    };
    Comm.prototype.listen = function (event, listener) {
        var evt = Comm.getCommEvent(event);
        _super.prototype.listen.call(this, evt, listener);
        return this;
    };
    Comm.prototype.info = function (event, listener) {
        var evt = Comm.getCommEvent(event);
        _super.prototype.info.call(this, evt, listener);
        return this;
    };
    Comm.prototype.ack = function (event, listener) {
        var evt = Comm.getCommEvent(event);
        _super.prototype.ack.call(this, evt, listener);
        return this;
    };
    Comm.prototype.answer = function (event, listener) {
        var evt = Comm.getCommEvent(event);
        _super.prototype.answer.call(this, evt, listener);
        return this;
    };
    Comm.prototype.respond = function (event, listener) {
        var evt = Comm.getCommEvent(event);
        _super.prototype.respond.call(this, evt, listener);
        return this;
    };
    Comm.prototype.onlyOnce = function () {
        _super.prototype.onlyOnce.call(this);
        return this;
    };
    Comm.prototype.dispose = function (callback) {
        _super.prototype.dispose.call(this, callback);
    };
    return Comm;
})(Eventer);
module.exports = Comm;
//# sourceMappingURL=Comm.js.map