var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var async = require('async');
var Eventer = require('../eventing/Eventer');
var Collection = (function (_super) {
    __extends(Collection, _super);
    function Collection(id, opts) {
        _super.call(this, {
            id: id,
            name: 'collection'
        });
        var defOpts = {};
        this.opts = this.opts.beAdoptedBy(defOpts, 'eventer');
        this.opts.merge(opts);
        this.collection = [];
    }
    Collection.prototype.add = function (item) {
        this.collection.push(item);
    };
    Collection.prototype.addMany = function (items) {
        this.collection = this.collection.concat(items);
    };
    Collection.prototype.remove = function (query, callback) {
        var removed = [];
        var instance = this;
        var collection = [];
        async.reduce(this.collection, collection, function (collection, item, callback) {
            item.who(function (e, whoIAm) {
                var match = false;
                var idMatch = _.contains(query.ids, whoIAm.id)
                    || _.isUndefined(query.ids)
                    || query.ids.length === 0;
                var nameMatch = _.contains(query.names, whoIAm.name)
                    || _.isUndefined(query.names)
                    || query.names.length === 0;
                if (!_.isUndefined(query.op) && query.op === 'or') {
                    match = idMatch || nameMatch;
                }
                else {
                    match = idMatch && nameMatch;
                }
                if (match) {
                    removed.push(item);
                }
                callback(null, collection);
            });
        }, function (e, collection) {
            instance.collection = collection;
            if (!_.isUndefined(callback)) {
                callback(e, removed);
            }
        });
    };
    Collection.prototype.get = function (query, callback) {
        var results = [];
        async.reduce(this.collection, results, function (results, item, callback) {
            item.who(function (e, whoIAm) {
                var match = false;
                var idMatch = _.contains(query.ids, whoIAm.id)
                    || _.isUndefined(query.ids)
                    || query.ids.length === 0;
                var nameMatch = _.contains(query.names, whoIAm.name)
                    || _.isUndefined(query.names)
                    || query.names.length === 0;
                if (!_.isUndefined(query.op) && query.op === 'or') {
                    match = idMatch || nameMatch;
                }
                else {
                    match = idMatch && nameMatch;
                }
                if (match) {
                    results.push(item);
                }
                callback(null, results);
            });
        }, function (e, results) {
            if (!_.isUndefined(callback)) {
                callback(e, results);
            }
        });
    };
    Collection.prototype.list = function () {
        return this.collection;
    };
    Collection.prototype.clear = function () {
        this.collection = [];
    };
    Collection.prototype.each = function (iterator, allDone) {
        async.each(this.collection, iterator, allDone);
    };
    Collection.prototype.dispose = function (callback) {
        this.clear();
        _super.prototype.dispose.call(this, callback);
    };
    return Collection;
})(Eventer);
module.exports = Collection;
//# sourceMappingURL=Collection.js.map